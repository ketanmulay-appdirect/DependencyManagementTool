import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  ShieldExclamationIcon,
  ExclamationTriangleIcon,
  ShieldCheckIcon,
  CubeIcon,
  BugAntIcon,
  InformationCircleIcon
} from '@heroicons/react/24/outline';

// Simple Tooltip Component
interface TooltipProps {
  content: string;
  children: React.ReactNode;
}

const Tooltip: React.FC<TooltipProps> = ({ content, children }) => {
  const [isVisible, setIsVisible] = useState(false);

  return (
    <div className="relative inline-block">
      <div
        onMouseEnter={() => setIsVisible(true)}
        onMouseLeave={() => setIsVisible(false)}
      >
        {children}
      </div>
      {isVisible && (
        <div className="absolute z-50 px-3 py-2 text-sm text-white bg-gray-900 rounded-lg shadow-lg -top-2 left-full ml-2 w-64">
          <div className="relative">
            {content}
            {/* Arrow pointing left */}
            <div className="absolute top-1/2 -left-1 transform -translate-y-1/2 w-2 h-2 bg-gray-900 rotate-45"></div>
          </div>
        </div>
      )}
    </div>
  );
};

interface DashboardStatsProps {
  stats: {
    total: number;
    critical: number;
    high: number;
    medium: number;
    low: number;
    fixable: number;
    uniquePackages: number;
  };
}

interface StatCardProps {
  icon: React.ComponentType<{ className?: string }>;
  label: string;
  value: number;
  color: string;
  bgColor: string;
  index: number;
  subtitle?: string;
  tooltip?: string;
}

const StatCard: React.FC<StatCardProps> = ({ 
  icon: IconComponent, 
  label, 
  value, 
  color, 
  bgColor,
  index,
  subtitle,
  tooltip
}) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3, delay: index * 0.1 }}
      className="bg-white rounded-lg p-6 border border-gray-200 shadow-sm hover:shadow-md transition-shadow duration-200"
    >
      <div className="flex items-center">
        <div className={`flex-shrink-0 p-3 rounded-lg ${bgColor}`}>
          <IconComponent className={`h-6 w-6 ${color}`} />
        </div>
        <div className="ml-4 flex-1">
          <div className="flex items-center space-x-2">
            <p className="text-sm font-medium text-gray-600 uppercase tracking-wide">
              {label}
            </p>
            {tooltip && (
              <Tooltip content={tooltip}>
                <InformationCircleIcon className="h-4 w-4 text-gray-400 hover:text-gray-600 cursor-help" />
              </Tooltip>
            )}
          </div>
          <p className="text-2xl font-bold text-gray-900">
            {value.toLocaleString()}
          </p>
          {subtitle && (
            <p className="text-xs text-gray-500 mt-1">
              {subtitle}
            </p>
          )}
        </div>
      </div>
    </motion.div>
  );
};

export const DashboardStats: React.FC<DashboardStatsProps> = ({ stats }) => {
  const statCards = [
    {
      icon: BugAntIcon,
      label: 'Total Vulnerabilities',
      value: stats.total,
      color: 'text-gray-700',
      bgColor: 'bg-gray-100',
      subtitle: `Across ${stats.uniquePackages} packages`,
      tooltip: 'Total number of security vulnerabilities found in your dependencies. This includes all severity levels from critical to low. Each vulnerability represents a known security issue that could potentially affect your application.',
    },
    {
      icon: ShieldExclamationIcon,
      label: 'Critical & High',
      value: stats.critical + stats.high,
      color: 'text-red-700',
      bgColor: 'bg-red-100',
      subtitle: `${stats.critical} critical, ${stats.high} high`,
      tooltip: 'High-priority vulnerabilities that should be addressed immediately. Critical and high severity vulnerabilities represent serious security risks that could lead to data breaches, unauthorized access, or system compromise.',
    },
    {
      icon: ExclamationTriangleIcon,
      label: 'Medium & Low',
      value: stats.medium + stats.low,
      color: 'text-yellow-700',
      bgColor: 'bg-yellow-100',
      subtitle: `${stats.medium} medium, ${stats.low} low`,
      tooltip: 'Lower-priority vulnerabilities that should be addressed as part of regular maintenance. Medium and low severity vulnerabilities typically require less urgent attention but should still be patched to maintain good security hygiene.',
    },
    {
      icon: ShieldCheckIcon,
      label: 'Fixable',
      value: stats.fixable,
      color: 'text-green-700',
      bgColor: 'bg-green-100',
      subtitle: 'Have available fixes',
      tooltip: 'Number of vulnerabilities that have automated fix suggestions available. These vulnerabilities can be resolved by updating to a specific version that contains the security patch. Click on any vulnerability with a fix button to see the recommended update.',
    },
  ];

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
      {statCards.map((stat, index) => (
        <StatCard
          key={stat.label}
          icon={stat.icon}
          label={stat.label}
          value={stat.value}
          color={stat.color}
          bgColor={stat.bgColor}
          index={index}
          subtitle={stat.subtitle}
          tooltip={stat.tooltip}
        />
      ))}
    </div>
  );
}; 