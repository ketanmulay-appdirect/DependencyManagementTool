import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  ChevronUpIcon, 
  ChevronDownIcon, 
  ClockIcon, 
  LinkIcon 
} from '@heroicons/react/24/outline';
import { Vulnerability, FixSuggestion } from '../../types';
import { SeverityBadge } from './SeverityBadge';
import { DependencyBadge } from './DependencyBadge';
import { FixButton } from './FixButton';
import { PackageManagerIcon } from './PackageManagerIcon';

interface VulnerabilityCardProps {
  vulnerability: Vulnerability;
  suggestions: FixSuggestion[];
  isSelected: boolean;
  onSelect: (vulnId: string) => void;
  index: number;
}

export const VulnerabilityCard: React.FC<VulnerabilityCardProps> = ({
  vulnerability,
  suggestions,
  isSelected,
  onSelect,
  index,
}) => {
  const [isExpanded, setIsExpanded] = useState(false);
  
  const fixSuggestion = suggestions.find(s => 
    s.fixesVulnerabilities.includes(vulnerability.cveId || vulnerability.id)
  );
  
  const primaryDep = vulnerability.affectedDependencies?.[0];
  const additionalDeps = vulnerability.affectedDependencies?.slice(1) || [];
  
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.2, delay: index * 0.03 }}
      className={`bg-white rounded-lg border transition-all duration-200 hover:shadow-md ${
        isSelected 
          ? 'border-blue-300 bg-blue-50 shadow-sm' 
          : 'border-gray-200 hover:border-gray-300'
      }`}
    >
      <div className="p-6">
        <div className="flex items-start space-x-4">
          {/* Selection Checkbox */}
          <input
            type="checkbox"
            checked={isSelected}
            onChange={() => onSelect(vulnerability.id)}
            className="mt-1 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
          />
          
          <div className="flex-1 min-w-0">
            {/* Header: CVE ID and Severity */}
            <div className="flex items-start justify-between mb-4">
              <div className="flex-1 min-w-0">
                <h3 className="text-lg font-bold text-gray-900 font-mono mb-2">
                  {vulnerability.cveId || vulnerability.id}
                </h3>
                <div className="text-sm text-gray-600">
                  {primaryDep ? (
                    <span className="font-medium">
                      {primaryDep.name}
                    </span>
                  ) : (
                    'Security vulnerability'
                  )}
                </div>
              </div>
              
              <div className="flex items-center gap-2">
                <SeverityBadge severity={vulnerability.severity} size="md" />
              </div>
            </div>

            {/* Version Information */}
            {primaryDep && (
              <div className="flex items-center space-x-3 mb-4">
                <PackageManagerIcon manager={primaryDep.packageManager} size="sm" />
                <div className="flex items-center space-x-2 text-sm">
                  <span className="px-2 py-1 bg-gray-100 text-gray-800 rounded font-mono">
                    v{primaryDep.version}
                  </span>
                  {primaryDep.targetVersion && 
                   primaryDep.targetVersion !== 'latest' && 
                   primaryDep.targetVersion !== primaryDep.version && 
                   primaryDep.targetVersion !== 'unknown' && (
                    <>
                      <span className="text-gray-400">â†’</span>
                      <span className="px-2 py-1 bg-green-100 text-green-800 rounded font-mono">
                        v{primaryDep.targetVersion}
                      </span>
                    </>
                  )}
                </div>
              </div>
            )}

            {/* Bottom Row: Metadata and Actions */}
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4 text-sm text-gray-500">
                <div className="flex items-center space-x-1">
                  <ClockIcon className="h-4 w-4" />
                  <span>{formatDate(vulnerability.publishedAt)}</span>
                </div>
                
                {vulnerability.jiraTicket && (
                  <a
                    href={`https://appdirect.jira.com/browse/${vulnerability.jiraTicket.key}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="flex items-center space-x-1 text-blue-600 hover:text-blue-700 transition-colors font-medium"
                    onClick={(e) => e.stopPropagation()}
                  >
                    <LinkIcon className="h-4 w-4" />
                    <span className="font-mono">{vulnerability.jiraTicket.key}</span>
                  </a>
                )}
                
                {additionalDeps.length > 0 && (
                  <span className="font-medium">
                    +{additionalDeps.length} more
                  </span>
                )}
              </div>

              {/* Fix Button */}
              {fixSuggestion && (
                <FixButton
                  vulnerability={vulnerability}
                  suggestion={fixSuggestion}
                  size="sm"
                />
              )}
            </div>
          </div>
        </div>
      </div>
    </motion.div>
  );
}; 