import React, { useState } from 'react';
import { 
  MagnifyingGlassIcon,
  FunnelIcon,
  ChevronDownIcon,
  XMarkIcon,
  AdjustmentsHorizontalIcon
} from '@heroicons/react/24/outline';
import { motion, AnimatePresence } from 'framer-motion';
import type { Vulnerability } from '../../types';

interface FilterBarProps {
  filters: {
    severity: string[];
    packageManager: string[];
    fixAvailable: boolean | null;
    search: string;
  };
  onFiltersChange: (filters: {
    severity: string[];
    packageManager: string[];
    fixAvailable: boolean | null;
    search: string;
  }) => void;
  vulnerabilities: Vulnerability[];
  sortField: string;
  sortDirection: string;
  onSortChange: (field: string) => void;
  onSortDirectionChange: (direction: string) => void;
}

type SortField = 'severity' | 'name' | 'publishedAt';

const severityOptions = [
  { value: 'critical', label: 'Critical', color: 'bg-red-100 text-red-800' },
  { value: 'high', label: 'High', color: 'bg-orange-100 text-orange-800' },
  { value: 'medium', label: 'Medium', color: 'bg-yellow-100 text-yellow-800' },
  { value: 'low', label: 'Low', color: 'bg-blue-100 text-blue-800' },
  { value: 'info', label: 'Info', color: 'bg-gray-100 text-gray-800' },
];

const sortOptions = [
  { value: 'severity', label: 'Severity' },
  { value: 'name', label: 'CVE ID' },
  { value: 'publishedAt', label: 'Published Date' },
];

export const FilterBar: React.FC<FilterBarProps> = ({
  filters,
  onFiltersChange,
  vulnerabilities,
  sortField,
  sortDirection,
  onSortChange,
  onSortDirectionChange,
}) => {
  const [showFilters, setShowFilters] = useState(false);

  // Extract unique package managers from vulnerabilities
  const packageManagers = Array.from(
    new Set(
      vulnerabilities.flatMap(v => 
        v.affectedDependencies?.map(dep => dep.packageManager) || []
      )
    )
  ).sort();

  const handleSearchChange = (value: string) => {
    onFiltersChange({ ...filters, search: value });
  };

  const handleSeverityFilter = (severity: string) => {
    const newSeverities = filters.severity.includes(severity)
      ? filters.severity.filter(s => s !== severity)
      : [...filters.severity, severity];
    onFiltersChange({ ...filters, severity: newSeverities });
  };

  const handlePackageManagerFilter = (manager: string) => {
    const newManagers = filters.packageManager.includes(manager)
      ? filters.packageManager.filter(m => m !== manager)
      : [...filters.packageManager, manager];
    onFiltersChange({ ...filters, packageManager: newManagers });
  };

  const handleFixAvailableFilter = (value: boolean | null) => {
    onFiltersChange({ ...filters, fixAvailable: value });
  };

  const clearAllFilters = () => {
    onFiltersChange({
      severity: [],
      packageManager: [],
      fixAvailable: null,
      search: '',
    });
  };

  const activeFilterCount = 
    filters.severity.length + 
    filters.packageManager.length + 
    (filters.fixAvailable !== null ? 1 : 0) +
    (filters.search ? 1 : 0);

  return (
    <div className="space-y-4">
      {/* Main Filter Bar */}
      <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between">
        {/* Search */}
        <div className="relative flex-1 max-w-md">
          <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <input
            type="text"
            placeholder="Search CVEs or packages..."
            value={filters.search}
            onChange={(e) => handleSearchChange(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 text-sm"
          />
        </div>

        {/* Controls */}
        <div className="flex items-center space-x-3">
          {/* Sort */}
          <div className="flex items-center space-x-2">
            <select
              value={sortField}
              onChange={(e) => onSortChange(e.target.value)}
              className="text-sm border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
            >
              {sortOptions.map(option => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
            <button
              onClick={() => onSortDirectionChange(sortDirection === 'asc' ? 'desc' : 'asc')}
              className="p-2 border border-gray-300 rounded-md hover:bg-gray-50 focus:ring-blue-500 focus:border-blue-500"
              title={`Sort ${sortDirection === 'asc' ? 'Descending' : 'Ascending'}`}
            >
              <AdjustmentsHorizontalIcon className={`h-4 w-4 text-gray-600 transition-transform ${
                sortDirection === 'desc' ? 'rotate-180' : ''
              }`} />
            </button>
          </div>

          {/* Filter Toggle */}
          <button
            onClick={() => setShowFilters(!showFilters)}
            className={`
              inline-flex items-center px-3 py-2 border border-gray-300 rounded-md text-sm font-medium transition-colors
              ${showFilters 
                ? 'bg-blue-50 text-blue-700 border-blue-300' 
                : 'bg-white text-gray-700 hover:bg-gray-50'
              }
            `}
          >
            <FunnelIcon className="h-4 w-4 mr-2" />
            Filters
            {activeFilterCount > 0 && (
              <span className="ml-2 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white bg-blue-600 rounded-full">
                {activeFilterCount}
              </span>
            )}
          </button>
        </div>
      </div>

      {/* Active Filters */}
      {activeFilterCount > 0 && (
        <div className="flex flex-wrap items-center gap-2">
          <span className="text-xs font-medium text-gray-600">Active filters:</span>
          
          {filters.severity.map(severity => (
            <span
              key={severity}
              className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                severityOptions.find(s => s.value === severity)?.color || 'bg-gray-100 text-gray-800'
              }`}
            >
              {severity}
              <button
                onClick={() => handleSeverityFilter(severity)}
                className="ml-1 hover:bg-black hover:bg-opacity-10 rounded-full p-0.5"
              >
                <XMarkIcon className="h-3 w-3" />
              </button>
            </span>
          ))}

          {filters.packageManager.map(manager => (
            <span
              key={manager}
              className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
            >
              {manager}
              <button
                onClick={() => handlePackageManagerFilter(manager)}
                className="ml-1 hover:bg-blue-200 rounded-full p-0.5"
              >
                <XMarkIcon className="h-3 w-3" />
              </button>
            </span>
          ))}

          {filters.fixAvailable !== null && (
            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
              {filters.fixAvailable ? 'Fixable' : 'Not Fixable'}
              <button
                onClick={() => handleFixAvailableFilter(null)}
                className="ml-1 hover:bg-green-200 rounded-full p-0.5"
              >
                <XMarkIcon className="h-3 w-3" />
              </button>
            </span>
          )}

          {filters.search && (
            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
              "{filters.search}"
              <button
                onClick={() => handleSearchChange('')}
                className="ml-1 hover:bg-purple-200 rounded-full p-0.5"
              >
                <XMarkIcon className="h-3 w-3" />
              </button>
            </span>
          )}

          <button
            onClick={clearAllFilters}
            className="text-xs text-gray-600 hover:text-gray-800 underline"
          >
            Clear all
          </button>
        </div>
      )}

      {/* Expandable Filters */}
      <AnimatePresence>
        {showFilters && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="overflow-hidden"
          >
            <div className="bg-gray-50 rounded-lg p-4 space-y-4">
              {/* Severity Filter */}
              <div>
                <h4 className="text-sm font-medium text-gray-700 mb-2">Severity</h4>
                <div className="flex flex-wrap gap-2">
                  {severityOptions.map(option => (
                    <button
                      key={option.value}
                      onClick={() => handleSeverityFilter(option.value)}
                      className={`
                        px-3 py-1 rounded-full text-xs font-medium transition-colors
                        ${filters.severity.includes(option.value)
                          ? option.color
                          : 'bg-white text-gray-600 border border-gray-300 hover:bg-gray-50'
                        }
                      `}
                    >
                      {option.label}
                    </button>
                  ))}
                </div>
              </div>

              {/* Package Manager Filter */}
              {packageManagers.length > 0 && (
                <div>
                  <h4 className="text-sm font-medium text-gray-700 mb-2">Package Manager</h4>
                  <div className="flex flex-wrap gap-2">
                    {packageManagers.map(manager => (
                      <button
                        key={manager}
                        onClick={() => handlePackageManagerFilter(manager)}
                        className={`
                          px-3 py-1 rounded-full text-xs font-medium transition-colors capitalize
                          ${filters.packageManager.includes(manager)
                            ? 'bg-blue-100 text-blue-800'
                            : 'bg-white text-gray-600 border border-gray-300 hover:bg-gray-50'
                          }
                        `}
                      >
                        {manager}
                      </button>
                    ))}
                  </div>
                </div>
              )}

              {/* Fix Available Filter */}
              <div>
                <h4 className="text-sm font-medium text-gray-700 mb-2">Fix Available</h4>
                <div className="flex gap-2">
                  <button
                    onClick={() => handleFixAvailableFilter(true)}
                    className={`
                      px-3 py-1 rounded-full text-xs font-medium transition-colors
                      ${filters.fixAvailable === true
                        ? 'bg-green-100 text-green-800'
                        : 'bg-white text-gray-600 border border-gray-300 hover:bg-gray-50'
                      }
                    `}
                  >
                    Fixable
                  </button>
                  <button
                    onClick={() => handleFixAvailableFilter(false)}
                    className={`
                      px-3 py-1 rounded-full text-xs font-medium transition-colors
                      ${filters.fixAvailable === false
                        ? 'bg-red-100 text-red-800'
                        : 'bg-white text-gray-600 border border-gray-300 hover:bg-gray-50'
                      }
                    `}
                  >
                    Not Fixable
                  </button>
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}; 