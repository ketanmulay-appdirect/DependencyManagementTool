import React, { useState, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  ViewColumnsIcon,
  Squares2X2Icon,
  MagnifyingGlassIcon,
  FunnelIcon,
  ArrowDownTrayIcon,
  CheckIcon,
  ExclamationTriangleIcon
} from '@heroicons/react/24/outline';
import { VulnerabilityCard } from './VulnerabilityCard';
import { VulnerabilityTableRow } from './VulnerabilityTableRow';
import { FilterBar } from './FilterBar';
import { ViewToggle } from './ViewToggle';
import { DashboardStats } from './DashboardStats';
import type { Vulnerability, FixSuggestion } from '../../types';

interface VulnerabilityDashboardProps {
  vulnerabilities: Vulnerability[];
  suggestions: FixSuggestion[];
  repositoryId?: string;
  repositoryUrl?: string;
  githubToken?: string;
  onCreatePR?: (selectedVulns: string[]) => Promise<{ url: string; number: string; title: string } | null>;
}

type ViewMode = 'table' | 'cards';
type SortField = 'severity' | 'name' | 'publishedAt';
type SortDirection = 'asc' | 'desc';

interface Filters {
  severity: string[];
  packageManager: string[];
  fixAvailable: boolean | null;
  search: string;
}

export const VulnerabilityDashboard: React.FC<VulnerabilityDashboardProps> = ({
  vulnerabilities,
  suggestions,
  repositoryId,
  repositoryUrl,
  githubToken,
  onCreatePR,
}) => {
  const [viewMode, setViewMode] = useState<ViewMode>('table');
  const [sortField, setSortField] = useState<SortField>('severity');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');
  const [selectedVulns, setSelectedVulns] = useState<Set<string>>(new Set());
  const [filters, setFilters] = useState<Filters>({
    severity: [],
    packageManager: [],
    fixAvailable: null,
    search: '',
  });
  const [isPRLoadingModalOpen, setIsPRLoadingModalOpen] = useState(false);
  const [prLinkModal, setPRLinkModal] = useState<{ url: string; number: string; title?: string } | null>(null);

  const severityOrder = { critical: 4, high: 3, medium: 2, low: 1, info: 0 };

  // Group vulnerabilities by dependency
  const groupedVulnerabilities = useMemo(() => {
    const grouped = new Map<string, Vulnerability[]>();
    
    vulnerabilities.forEach(vuln => {
      vuln.affectedDependencies?.forEach(dep => {
        const key = `${dep.name}@${dep.version}`;
        if (!grouped.has(key)) {
          grouped.set(key, []);
        }
        grouped.get(key)!.push(vuln);
      });
    });
    
    return grouped;
  }, [vulnerabilities]);

  // Filter and sort vulnerabilities
  const processedVulnerabilities = useMemo(() => {
    let filtered = [...vulnerabilities];

    // Apply filters
    if (filters.severity.length > 0) {
      filtered = filtered.filter(v => filters.severity.includes(v.severity));
    }

    if (filters.packageManager.length > 0) {
      filtered = filtered.filter(v => 
        v.affectedDependencies?.some(dep => 
          filters.packageManager.includes(dep.packageManager)
        )
      );
    }

    if (filters.fixAvailable !== null) {
      const hasFixSuggestion = (vulnId: string) => 
        suggestions.some(s => s.fixesVulnerabilities.includes(vulnId));
      
      filtered = filtered.filter(v => 
        filters.fixAvailable ? hasFixSuggestion(v.id) : !hasFixSuggestion(v.id)
      );
    }

    if (filters.search) {
      const search = filters.search.toLowerCase();
      filtered = filtered.filter(v =>
        v.cveId?.toLowerCase().includes(search) ||
        v.title.toLowerCase().includes(search) ||
        v.affectedDependencies?.some(dep => 
          dep.name.toLowerCase().includes(search)
        )
      );
    }

    // Sort vulnerabilities
    filtered.sort((a, b) => {
      let comparison = 0;
      
      switch (sortField) {
        case 'severity':
          comparison = severityOrder[b.severity] - severityOrder[a.severity];
          break;
        case 'name':
          comparison = (a.cveId || a.title).localeCompare(b.cveId || b.title);
          break;
        case 'publishedAt':
          comparison = new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime();
          break;
      }
      
      return sortDirection === 'asc' ? comparison : -comparison;
    });

    return filtered;
  }, [vulnerabilities, suggestions, filters, sortField, sortDirection]);

  // Calculate dashboard stats
  const stats = useMemo(() => {
    const severityCounts = vulnerabilities.reduce((acc, v) => {
      acc[v.severity] = (acc[v.severity] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const fixableCount = vulnerabilities.filter(v => {
      const searchId = v.cveId || v.id;
      return suggestions.some(s => s.fixesVulnerabilities.includes(searchId));
    }).length;

    const uniquePackages = new Set(
      vulnerabilities.flatMap(v => 
        v.affectedDependencies?.map(dep => dep.name) || []
      )
    ).size;

    return {
      total: vulnerabilities.length,
      critical: severityCounts.critical || 0,
      high: severityCounts.high || 0,
      medium: severityCounts.medium || 0,
      low: severityCounts.low || 0,
      fixable: fixableCount,
      uniquePackages,
    };
  }, [vulnerabilities, suggestions]);

  const handleSelectVuln = (vulnId: string) => {
    const newSelected = new Set(selectedVulns);
    if (newSelected.has(vulnId)) {
      newSelected.delete(vulnId);
    } else {
      newSelected.add(vulnId);
    }
    setSelectedVulns(newSelected);
  };

  const handleSelectAll = () => {
    if (selectedVulns.size === processedVulnerabilities.length) {
      setSelectedVulns(new Set());
    } else {
      setSelectedVulns(new Set(processedVulnerabilities.map(v => v.id)));
    }
  };

  const handleBulkAction = (action: 'export' | 'createPR') => {
    if (action === 'export') {
      // Export selected vulnerabilities as JSON
      const selectedData = processedVulnerabilities.filter(v => 
        selectedVulns.has(v.id)
      );
      const blob = new Blob([JSON.stringify(selectedData, null, 2)], {
        type: 'application/json',
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `vulnerabilities-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } else if (action === 'createPR' && onCreatePR) {
      handleCreatePR(Array.from(selectedVulns));
    }
  };

  // Enhanced PR creation handler that uses the modal states
  const handleCreatePR = async (selectedVulnIds: string[]) => {
    if (isPRLoadingModalOpen) return; // Prevent duplicate
    setIsPRLoadingModalOpen(true);
    
    try {
      // Call the parent's onCreatePR function
      if (onCreatePR) {
        const prDetails = await onCreatePR(selectedVulnIds);
        if (prDetails) {
          setIsPRLoadingModalOpen(false);
          setPRLinkModal(prDetails);
        } else {
          setIsPRLoadingModalOpen(false);
          // Optionally show an error message if PR creation failed
        }
      }
    } catch (error) {
      setIsPRLoadingModalOpen(false);
      console.error('Error creating PR:', error);
      // Could add error state here if needed
    }
  };

  return (
    <div className="space-y-6">
      {/* Dashboard Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Security Vulnerabilities</h1>
          <p className="text-base text-gray-600">
            {stats.total} vulnerabilities found across {stats.uniquePackages} packages
          </p>
        </div>
        
        <div className="flex items-center space-x-3">
          {selectedVulns.size > 0 && (
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              className="flex items-center space-x-2"
            >
              <span className="text-sm text-gray-600">
                {selectedVulns.size} selected
              </span>
              <button
                onClick={() => handleBulkAction('export')}
                className="inline-flex items-center px-3 py-1.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                <ArrowDownTrayIcon className="h-4 w-4 mr-1" />
                Export
              </button>
              {onCreatePR && (
                <button
                  onClick={() => handleBulkAction('createPR')}
                  className="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-60 disabled:cursor-not-allowed"
                  disabled={isPRLoadingModalOpen}
                >
                  <CheckIcon className="h-4 w-4 mr-1" />
                  {isPRLoadingModalOpen ? 'Creating PR...' : 'Create PR'}
                </button>
              )}
            </motion.div>
          )}
          
          <ViewToggle 
            mode={viewMode} 
            onChange={setViewMode}
          />
        </div>
      </div>

      {/* Dashboard Stats */}
      <DashboardStats stats={stats} />

      {/* Filter Bar */}
      <FilterBar
        filters={filters}
        onFiltersChange={setFilters}
        vulnerabilities={vulnerabilities}
        sortField={sortField}
        sortDirection={sortDirection}
        onSortChange={(field: string) => setSortField(field as SortField)}
        onSortDirectionChange={(direction: string) => setSortDirection(direction as SortDirection)}
      />

      {/* Main Content */}
      <div className="min-h-[400px]">
        {processedVulnerabilities.length === 0 ? (
          <div className="text-center py-12">
            <ExclamationTriangleIcon className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-xl font-medium text-gray-900 mb-2">No vulnerabilities found</h3>
            <p className="text-base text-gray-600">
              {vulnerabilities.length === 0 
                ? "Great! No security vulnerabilities detected in your dependencies."
                : "Try adjusting your filters to see more results."
              }
            </p>
          </div>
        ) : (
          <AnimatePresence mode="wait">
            {viewMode === 'cards' ? (
              <motion.div
                key="cards"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.2 }}
                className="grid grid-cols-1 lg:grid-cols-2 2xl:grid-cols-3 gap-8"
              >
                {processedVulnerabilities.map((vulnerability, index) => (
                  <VulnerabilityCard
                    key={vulnerability.id}
                    vulnerability={vulnerability}
                    suggestions={suggestions}
                    isSelected={selectedVulns.has(vulnerability.id)}
                    onSelect={handleSelectVuln}
                    index={index}
                  />
                ))}
              </motion.div>
            ) : (
              <motion.div
                key="table"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.2 }}
                className="bg-white rounded-lg border border-gray-200 overflow-hidden"
              >
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-4 py-3 text-left">
                          <input
                            type="checkbox"
                            checked={selectedVulns.size === processedVulnerabilities.length && processedVulnerabilities.length > 0}
                            onChange={handleSelectAll}
                            className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                          />
                        </th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Vulnerability
                        </th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Component
                        </th>
                        <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Severity
                        </th>
                        <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Actions
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {processedVulnerabilities.map((vulnerability, index) => (
                        <VulnerabilityTableRow
                          key={vulnerability.id}
                          vulnerability={vulnerability}
                          suggestions={suggestions}
                          isSelected={selectedVulns.has(vulnerability.id)}
                          onSelect={handleSelectVuln}
                          index={index}
                        />
                      ))}
                    </tbody>
                  </table>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        )}
      </div>

      {/* Loading Modal */}
      {isPRLoadingModalOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
          <div className="bg-white rounded-lg shadow-lg p-8 flex flex-col items-center">
            <div className="mb-4">
              <svg className="animate-spin h-8 w-8 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path>
              </svg>
            </div>
            <div className="text-lg font-medium text-gray-800">Creating Pull Request...</div>
            <div className="text-gray-500 mt-2">This may take a few moments. Please wait.</div>
          </div>
        </div>
      )}

      {/* PR Link Modal */}
      {prLinkModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
          <div className="bg-white rounded-lg shadow-lg p-8 flex flex-col items-center max-w-md">
            <div className="mb-4 text-green-600">
              <svg className="h-8 w-8" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <div className="text-lg font-semibold text-gray-800 mb-2">Pull Request Created!</div>
            <div className="text-sm text-gray-600 mb-4 text-center">
              {prLinkModal.title || `Successfully created pull request for ${Array.from(selectedVulns).length} selected vulnerabilities.`}
            </div>
            <a
              href={prLinkModal.url}
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-600 underline text-base mb-4 hover:text-blue-800"
            >
              View PR #{prLinkModal.number}
            </a>
            <div className="text-xs text-gray-500 mb-4">
              Click the link above to view the pull request on GitHub.
            </div>
            <button
              className="mt-2 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
              onClick={() => setPRLinkModal(null)}
            >
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  );
}; 