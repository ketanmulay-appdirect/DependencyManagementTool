import React from 'react';
import { motion } from 'framer-motion';
import { LinkIcon } from '@heroicons/react/24/outline';
import { SeverityBadge } from './SeverityBadge';

import { FixButton } from './FixButton';
import { PackageManagerIcon } from './PackageManagerIcon';
import type { Vulnerability, FixSuggestion } from '../../types';

interface VulnerabilityTableRowProps {
  vulnerability: Vulnerability;
  suggestions: FixSuggestion[];
  isSelected: boolean;
  onSelect: (vulnId: string) => void;
  index: number;
}

export const VulnerabilityTableRow: React.FC<VulnerabilityTableRowProps> = ({
  vulnerability,
  suggestions,
  isSelected,
  onSelect,
  index,
}) => {
  const fixSuggestion = suggestions.find(s => 
    s.fixesVulnerabilities.includes(vulnerability.cveId || vulnerability.id)
  );
  
  const primaryDep = vulnerability.affectedDependencies?.[0];
  const additionalDepsCount = (vulnerability.affectedDependencies?.length || 1) - 1;

  return (
    <motion.tr
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.2, delay: index * 0.02 }}
      className={`hover:bg-gray-50 transition-colors ${
        isSelected ? 'bg-blue-50' : ''
      }`}
    >
      {/* Selection */}
      <td className="px-4 py-6">
        <input
          type="checkbox"
          checked={isSelected}
          onChange={() => onSelect(vulnerability.id)}
          className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
        />
      </td>

      {/* Vulnerability */}
      <td className="px-4 py-6">
        <div className="space-y-2">
          <div className="font-mono text-base font-medium text-gray-900">
            {vulnerability.cveId || vulnerability.title}
          </div>
          <div className="text-sm text-gray-600 max-w-xs">
            {(() => {
              // Clean up description - extract component info if available
              const desc = vulnerability.description || '';
              const componentMatch = desc.match(/\*?Component\*?:\s*([^\n\r*]+)/i);
              if (componentMatch) {
                return `Component: ${componentMatch[1].replace(/\*/g, '').trim()}`;
              }
              return desc || 'Security vulnerability detected';
            })()}
          </div>
          {vulnerability.jiraTicket && (
            <a
              href={`https://appdirect.jira.com/browse/${vulnerability.jiraTicket.key}`}
              target="_blank"
              rel="noopener noreferrer"
              className="inline-flex items-center space-x-1 text-sm text-blue-600 hover:text-blue-700 transition-colors"
              onClick={(e) => e.stopPropagation()}
            >
              <LinkIcon className="h-4 w-4" />
              <span className="font-mono font-medium">{vulnerability.jiraTicket.key}</span>
            </a>
          )}
        </div>
      </td>

      {/* Component */}
      <td className="px-4 py-6">
        {primaryDep ? (
          <div className="space-y-2">
            <div className="flex items-center space-x-2">
              <PackageManagerIcon manager={primaryDep.packageManager} size="sm" />
              <div className="flex-1 min-w-0">
                <div className="font-mono text-sm text-gray-900 truncate max-w-xs font-medium" title={primaryDep.name}>
                  {primaryDep.name}
                </div>
                <div className="text-sm text-gray-600 space-x-2">
                  <span className="inline-flex items-center px-2 py-1 rounded text-xs bg-gray-100 text-gray-800 font-mono">
                    v{primaryDep.version}
                  </span>
                  {primaryDep.targetVersion && primaryDep.targetVersion !== 'latest' && primaryDep.targetVersion !== primaryDep.version && primaryDep.targetVersion !== 'unknown' ? (
                    <>
                      <span className="text-gray-400">â†’</span>
                      <span className="inline-flex items-center px-2 py-1 rounded text-xs bg-green-100 text-green-800 font-mono">
                        v{primaryDep.targetVersion}
                      </span>
                    </>
                  ) : null}
                </div>
              </div>
            </div>
            {additionalDepsCount > 0 && (
              <div className="text-sm text-gray-500 font-medium">
                +{additionalDepsCount} more {additionalDepsCount === 1 ? 'dependency' : 'dependencies'}
              </div>
            )}
          </div>
        ) : (
          <div className="text-sm text-gray-500">No dependencies</div>
        )}
      </td>

      {/* Severity */}
      <td className="px-4 py-6 text-center">
        <SeverityBadge severity={vulnerability.severity} size="sm" />
      </td>


      {/* Actions */}
      <td className="px-4 py-6 text-center">
        {fixSuggestion ? (
          <FixButton
            vulnerability={vulnerability}
            suggestion={fixSuggestion}
            size="sm"
            variant="minimal"
          />
        ) : (
          <span className="text-xs text-gray-400">No fix</span>
        )}
      </td>
    </motion.tr>
  );
}; 