import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  XMarkIcon,
  ExclamationTriangleIcon,
  CheckCircleIcon,
  InformationCircleIcon,
  ArrowUpIcon,
  BeakerIcon
} from '@heroicons/react/24/outline';

interface FixSuggestion {
  id: string;
  dependencyName: string;
  currentVersion: string;
  suggestedVersion: string;
  updateType: 'patch' | 'minor' | 'major' | 'alternative';
  confidence: number;
  fixesVulnerabilities: string[];
  testingRequired: boolean;
  migrationNotes?: string;
  breakingChanges?: {
    type: 'api' | 'behavior' | 'dependency';
    description: string;
    mitigation?: string;
  }[];
  // Additional version info
  affectedVersion?: string;
  recommendedVersion?: string;
  latestVersion?: string;
}

interface FixSuggestionModalProps {
  fixSuggestion: FixSuggestion;
  onClose: () => void;
}

export const FixSuggestionModal: React.FC<FixSuggestionModalProps> = ({
  fixSuggestion,
  onClose,
}) => {
  const getUpdateTypeColor = (type: string) => {
    switch (type) {
      case 'patch':
        return 'text-green-700 bg-green-100';
      case 'minor':
        return 'text-blue-700 bg-blue-100';
      case 'major':
        return 'text-orange-700 bg-orange-100';
      case 'alternative':
        return 'text-purple-700 bg-purple-100';
      default:
        return 'text-gray-700 bg-gray-100';
    }
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 0.8) return 'text-green-700 bg-green-100';
    if (confidence >= 0.6) return 'text-yellow-700 bg-yellow-100';
    return 'text-orange-700 bg-orange-100';
  };

  const getConfidenceLabel = (confidence: number) => {
    if (confidence >= 0.8) return 'High Confidence';
    if (confidence >= 0.6) return 'Medium Confidence';
    return 'Low Confidence';
  };

  return (
    <AnimatePresence>
      <div className="modal-overlay" onClick={onClose}>
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.9 }}
          transition={{ duration: 0.2 }}
          className="bg-white rounded-xl shadow-2xl max-w-3xl border border-gray-200"
          style={{ fontFamily: 'Inter, system-ui, sans-serif' }}
          onClick={(e) => e.stopPropagation()}
        >
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b border-gray-200">
            <div>
              <h3 className="text-lg font-semibold text-gray-900">
                Fix Suggestion
              </h3>
              <p className="text-sm text-gray-600 mt-1">
                {fixSuggestion.dependencyName}
              </p>
            </div>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600 transition-colors"
            >
              <XMarkIcon className="h-6 w-6" />
            </button>
          </div>

          {/* Content */}
          <div className="p-6 space-y-6">
            {/* Version Update */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-gray-50 rounded-lg">
              <div className="text-center">
                <p className="text-sm text-gray-600 mb-1">Current Version</p>
                <p className="text-lg font-mono font-semibold text-gray-900">
                  v{fixSuggestion.currentVersion}
                </p>
                {fixSuggestion.affectedVersion && (
                  <p className="text-xs text-gray-500 mt-1">
                    Affected: {fixSuggestion.affectedVersion}
                  </p>
                )}
              </div>
              <div className="flex justify-center items-center">
                <ArrowUpIcon className="h-6 w-6 text-gray-400" />
              </div>
              <div className="text-center">
                <p className="text-sm text-gray-600 mb-1">Recommended Version</p>
                <p className="text-lg font-mono font-semibold text-green-700">
                  {(() => {
                    const version = fixSuggestion.recommendedVersion || fixSuggestion.suggestedVersion;
                    return version === '*' || version.includes('latest') ? 'Latest' : `v${version}`;
                  })()}
                </p>
                {fixSuggestion.latestVersion && fixSuggestion.latestVersion !== (fixSuggestion.recommendedVersion || fixSuggestion.suggestedVersion) && (
                  <p className="text-xs text-blue-600 mt-1">
                    Latest: {fixSuggestion.latestVersion}
                  </p>
                )}
              </div>
            </div>

            {/* Update Type and Confidence */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Update Type
                </label>
                <span className={`
                  inline-flex items-center px-3 py-1 rounded-full text-sm font-medium
                  ${getUpdateTypeColor(fixSuggestion.updateType)}
                `}>
                  {fixSuggestion.updateType.charAt(0).toUpperCase() + fixSuggestion.updateType.slice(1)} Update
                </span>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Confidence Level
                </label>
                <span className={`
                  inline-flex items-center px-3 py-1 rounded-full text-sm font-medium
                  ${getConfidenceColor(fixSuggestion.confidence)}
                `}>
                  {getConfidenceLabel(fixSuggestion.confidence)} ({Math.round(fixSuggestion.confidence * 100)}%)
                </span>
              </div>
            </div>

            {/* Fixes Vulnerabilities */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Fixes Vulnerabilities
              </label>
              <div className="space-y-2">
                {fixSuggestion.fixesVulnerabilities.map((cve, index) => (
                  <div key={index} className="flex items-center space-x-2">
                    <CheckCircleIcon className="h-4 w-4 text-green-600" />
                    <span className="text-sm font-mono text-gray-900">{cve}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Testing Required */}
            {fixSuggestion.testingRequired && (
              <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                <div className="flex items-start space-x-3">
                  <BeakerIcon className="h-5 w-5 text-yellow-600 mt-0.5" />
                  <div>
                    <h4 className="text-sm font-medium text-yellow-800">
                      Testing Required
                    </h4>
                    <p className="text-sm text-yellow-700 mt-1">
                      This update requires thorough testing before deployment. 
                      Please run your test suite and verify functionality.
                    </p>
                  </div>
                </div>
              </div>
            )}

            {/* Breaking Changes */}
            {fixSuggestion.breakingChanges && fixSuggestion.breakingChanges.length > 0 && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  Potential Breaking Changes
                </label>
                <div className="space-y-3">
                  {fixSuggestion.breakingChanges.map((change, index) => (
                    <div key={index} className="p-4 bg-red-50 border border-red-200 rounded-lg">
                      <div className="flex items-start space-x-3">
                        <ExclamationTriangleIcon className="h-5 w-5 text-red-600 mt-0.5" />
                        <div className="flex-1">
                          <h4 className="text-sm font-medium text-red-800 capitalize">
                            {change.type} Change
                          </h4>
                          <p className="text-sm text-red-700 mt-1">
                            {change.description}
                          </p>
                          {change.mitigation && (
                            <div className="mt-2 p-2 bg-red-100 rounded">
                              <p className="text-xs text-red-800">
                                <strong>Mitigation:</strong> {change.mitigation}
                              </p>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Migration Notes */}
            {fixSuggestion.migrationNotes && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Migration Notes
                </label>
                <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                  <div className="flex items-start space-x-3">
                    <InformationCircleIcon className="h-5 w-5 text-blue-600 mt-0.5" />
                    <div className="flex-1">
                      <pre className="text-sm text-blue-800 whitespace-pre-wrap font-sans">
                        {fixSuggestion.migrationNotes}
                      </pre>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Footer */}
          <div className="flex justify-end space-x-3 p-6 border-t border-gray-200">
            <button
              onClick={onClose}
              className="button-secondary"
            >
              Close
            </button>
            <button
              onClick={() => {
                // Copy update command to clipboard
                const command = `# Update ${fixSuggestion.dependencyName} to ${fixSuggestion.suggestedVersion}`;
                navigator.clipboard.writeText(command);
                onClose();
              }}
              className="button-primary"
            >
              Copy Update Command
            </button>
          </div>
        </motion.div>
      </div>
    </AnimatePresence>
  );
}; 