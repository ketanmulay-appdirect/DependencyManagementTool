import React, { useState, useMemo } from 'react';
import { motion } from 'framer-motion';
import { 
  ChevronUpIcon, 
  ChevronDownIcon,
  ExclamationTriangleIcon,
  ShieldCheckIcon,
  BugAntIcon,
  LinkIcon,
  CheckIcon,
  XMarkIcon
} from '@heroicons/react/24/outline';
import { SeverityBadge } from './SeverityBadge';
// @ts-ignore
import { PackageManagerBadge } from './PackageManagerBadge';
// @ts-ignore  
import { FixSuggestionModal } from './FixSuggestionModal';

interface Vulnerability {
  id: string;
  cveId?: string;
  title: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  affectedDependencies: {
    name: string;
    version: string;
    targetVersion?: string;
    packageManager: string;
    filePath: string;
  }[];
  jiraTicket?: {
    key: string;
    summary: string;
    status: string;
  };
}

interface FixSuggestion {
  id: string;
  dependencyName: string;
  currentVersion: string;
  suggestedVersion: string;
  updateType: 'patch' | 'minor' | 'major' | 'alternative';
  confidence: number;
  fixesVulnerabilities: string[];
  testingRequired: boolean;
  migrationNotes?: string;
}

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
  suggestions: FixSuggestion[];
  repositoryId: string;
  repositoryUrl?: string;
  githubToken?: string;
}

type SortField = 'severity' | 'name' | 'affectedDeps';
type SortDirection = 'asc' | 'desc';

export const VulnerabilityTable: React.FC<VulnerabilityTableProps> = ({
  vulnerabilities,
  suggestions,
  repositoryId,
  repositoryUrl,
  githubToken,
}) => {
  const [sortField, setSortField] = useState<SortField>('severity');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');
  const [selectedVulns, setSelectedVulns] = useState<Set<string>>(new Set());
  const [filterSeverity, setFilterSeverity] = useState<string>('all');
  const [selectedFix, setSelectedFix] = useState<FixSuggestion | null>(null);
  const [isCreatingPR, setIsCreatingPR] = useState(false);
  const [viewMode, setViewMode] = useState<'table' | 'detailed'>('detailed'); // Default to detailed view

  const severityOrder = { critical: 4, high: 3, medium: 2, low: 1, info: 0 };

  const sortedVulnerabilities = useMemo(() => {
    // Defensive programming - ensure vulnerabilities is an array
    const safeVulnerabilities = Array.isArray(vulnerabilities) ? vulnerabilities : [];
    
    return [...safeVulnerabilities].sort((a, b) => {
      let comparison = 0;
      
      switch (sortField) {
        case 'severity':
          comparison = severityOrder[b.severity] - severityOrder[a.severity];
          break;
        case 'name':
          comparison = a.title.localeCompare(b.title);
          break;
        case 'affectedDeps':
          comparison = (b.affectedDependencies || []).length - (a.affectedDependencies || []).length;
          break;
        default:
          comparison = 0;
      }
      
      return sortDirection === 'asc' ? comparison : -comparison;
    });
  }, [vulnerabilities, sortField, sortDirection]);

  const filteredVulnerabilities = useMemo(() => {
    if (filterSeverity === 'all') return sortedVulnerabilities;
    return sortedVulnerabilities.filter(vuln => vuln.severity === filterSeverity);
  }, [sortedVulnerabilities, filterSeverity]);

  const handleSort = (field: SortField) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('desc');
    }
  };

  const handleSelectVuln = (vulnId: string) => {
    const newSelected = new Set(selectedVulns);
    if (newSelected.has(vulnId)) {
      newSelected.delete(vulnId);
    } else {
      newSelected.add(vulnId);
    }
    setSelectedVulns(newSelected);
  };

  const handleSelectAll = () => {
    if (selectedVulns.size === filteredVulnerabilities.length) {
      setSelectedVulns(new Set());
    } else {
      setSelectedVulns(new Set(filteredVulnerabilities.map(v => v.id)));
    }
  };

  const getFixSuggestion = (vulnerability: Vulnerability) => {
    return suggestions.find(suggestion => 
      suggestion.fixesVulnerabilities.includes(vulnerability.cveId || vulnerability.id)
    );
  };

  const handleCreatePR = async () => {
    setIsCreatingPR(true);
    try {
      // Helper function to extract recommended version from JIRA recommendedActions
      const extractRecommendedVersion = (vuln: Vulnerability): string => {
        // First check if targetVersion is already set
        if (vuln.affectedDependencies?.some(dep => dep.targetVersion && dep.targetVersion !== 'latest')) {
          return vuln.affectedDependencies.find(dep => dep.targetVersion && dep.targetVersion !== 'latest')?.targetVersion || 'latest';
        }
        
        // Extract from JIRA ticket recommendedActions
        if ((vuln as any).jiraTicket?.wizFindings?.length > 0) {
          for (const finding of (vuln as any).jiraTicket.wizFindings) {
            if (finding.recommendedActions) {
              for (const action of finding.recommendedActions) {
                // Parse "Update commons-io:commons-io to version 2.15.1"
                const versionMatch = action.match(/(?:update|upgrade).*?(?:to\s+)?version\s+([0-9]+\.[0-9]+\.[0-9]+[a-zA-Z0-9.-]*)/i);
                if (versionMatch) {
                  return versionMatch[1];
                }
              }
            }
          }
        }
        
        // Fallback: extract from vulnerability description
        if (vuln.description) {
          const versionMatch = vuln.description.match(/Recommended Version:\s*([^\n\r*]+)/i);
          if (versionMatch) {
            return versionMatch[1].replace(/\*/g, '').trim();
          }
        }
        
        // Last fallback
        return 'latest';
      };

      // Collect detailed fix information for selected vulnerabilities
      const selectedFixes = Array.from(selectedVulns)
        .map(vulnId => {
          const vuln = vulnerabilities.find(v => v.id === vulnId);
          if (!vuln) return null;
          
          const fix = getFixSuggestion(vuln);
          
          return {
            vulnerabilityId: vuln.id,
            cveId: vuln.cveId,
            jiraTicket: vuln.jiraTicket?.key,
            affectedDependencies: vuln.affectedDependencies?.map(dep => {
              const recommendedVersion = extractRecommendedVersion(vuln);
              return {
                name: dep.name,
                currentVersion: dep.version,
                targetVersion: recommendedVersion, // Extract actual version instead of 'latest'
                packageManager: dep.packageManager,
                filePath: dep.filePath,
              };
            }) || [],
            fixSuggestion: fix,
          };
        })
        .filter((fix): fix is NonNullable<typeof fix> => fix !== null);

      // Create detailed PR description
      const prDescription = `# Security Vulnerability Fixes

This PR addresses ${selectedVulns.size} security vulnerabilities identified by Wiz Security:

${selectedFixes.map(fix => `
## ${fix.cveId || fix.vulnerabilityId}
- **JIRA Ticket**: ${fix.jiraTicket}
- **Dependencies Updated**:
${fix.affectedDependencies.map(dep => 
  `  - \`${dep.name}\`: ${dep.currentVersion} → ${dep.targetVersion || 'latest'}`
).join('\n')}
`).join('\n')}

## Testing Recommendations
- Run full test suite before merging
- Verify no breaking changes in affected functionality
- Check for any deprecated API usage

## References
${selectedFixes.map(fix => 
  fix.jiraTicket ? `- [${fix.jiraTicket}](https://appdirect.jira.com/browse/${fix.jiraTicket})` : ''
).filter(Boolean).join('\n')}
`;

      // Validate required parameters for PR creation
      if (!githubToken) {
        alert('❌ GitHub token is required for PR creation. Please re-run the analysis with a valid GitHub token.');
        return;
      }

      if (!repositoryUrl) {
        alert('❌ Repository URL is required for PR creation. Please re-run the analysis.');
        return;
      }

      const response = await fetch('/api/pull-requests/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          repositoryId,
          fixes: selectedFixes,
          prTitle: `Security: Fix ${selectedVulns.size} vulnerabilities [${selectedFixes.map(f => f.jiraTicket).join(', ')}]`,
          prDescription,
          createSeparatePRs: false,
          githubToken,
          repositoryUrl,
        }),
      });

      if (response.ok) {
        const result = await response.json();
        // Handle success
        setSelectedVulns(new Set());
        alert(`✅ Success! Created ${result.data.pullRequests.length} pull request(s):\n\n${result.data.pullRequests.map((pr: any) => `• PR #${pr.number}: ${pr.title}`).join('\n')}\n\n${result.data.message}`);
        console.log('PR created successfully:', result);
      } else {
        const errorText = await response.text();
        console.error('Failed to create PR:', errorText);
        alert(`❌ Failed to create pull request: ${errorText}`);
      }
    } catch (error) {
      console.error('Error creating PR:', error);
      alert(`❌ Error creating pull request: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setIsCreatingPR(false);
    }
  };

  const SortButton: React.FC<{ field: SortField; children: React.ReactNode }> = ({ field, children }) => (
    <button
      onClick={() => handleSort(field)}
      className="flex items-center space-x-1 text-left hover:text-primary-600 transition-colors"
    >
      <span>{children}</span>
      {sortField === field && (
        sortDirection === 'asc' ? 
          <ChevronUpIcon className="h-4 w-4" /> : 
          <ChevronDownIcon className="h-4 w-4" />
      )}
    </button>
  );

  return (
    <div className="space-y-4">
      {/* Controls */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-4 sm:space-y-0">
        <div className="flex items-center space-x-4">
          <select
            value={filterSeverity}
            onChange={(e) => setFilterSeverity(e.target.value)}
            className="input-field w-auto"
          >
            <option value="all">All Severities</option>
            <option value="critical">Critical</option>
            <option value="high">High</option>
            <option value="medium">Medium</option>
            <option value="low">Low</option>
            <option value="info">Info</option>
          </select>
          
          {/* View Mode Toggle */}
          <div className="flex items-center space-x-2 bg-gray-100 rounded-lg p-1">
            <button
              onClick={() => setViewMode('table')}
              className={`px-3 py-1 rounded text-sm font-medium transition-colors ${
                viewMode === 'table' 
                  ? 'bg-white text-gray-900 shadow-sm' 
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              Table
            </button>
            <button
              onClick={() => setViewMode('detailed')}
              className={`px-3 py-1 rounded text-sm font-medium transition-colors ${
                viewMode === 'detailed' 
                  ? 'bg-white text-gray-900 shadow-sm' 
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              Detailed
            </button>
          </div>
          
          {selectedVulns.size > 0 && (
            <span className="text-sm text-gray-600">
              {selectedVulns.size} selected
            </span>
          )}
        </div>

        {selectedVulns.size > 0 && (
          <button
            onClick={handleCreatePR}
            disabled={isCreatingPR}
            className="button-primary"
          >
            {isCreatingPR ? (
              <div className="flex items-center">
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Creating PR...
              </div>
            ) : (
              `Create PR for ${selectedVulns.size} fixes`
            )}
          </button>
        )}
      </div>

      {/* Table or Detailed View */}
      {viewMode === 'table' ? (
        <div className="overflow-x-auto bg-white shadow-sm rounded-lg border border-gray-200">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-12">
                  <input
                    type="checkbox"
                    checked={selectedVulns.size === filteredVulnerabilities.length && filteredVulnerabilities.length > 0}
                    onChange={handleSelectAll}
                    className="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
                  />
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-20">
                  <SortButton field="severity">Severity</SortButton>
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-64">
                  <SortButton field="name">Vulnerability</SortButton>
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-56">
                  <SortButton field="affectedDeps">Dependencies</SortButton>
                </th>
                <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-20">Fix</th>
                <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-20">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredVulnerabilities.map((vulnerability, index) => {
                const fixSuggestion = getFixSuggestion(vulnerability);
                const isSelected = selectedVulns.has(vulnerability.id);
                
                return (
                  <motion.tr
                    key={vulnerability.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: index * 0.05 }}
                    className={`hover:bg-gray-50 ${isSelected ? 'bg-blue-50' : ''}`}
                  >
                    <td className="px-3 py-4 whitespace-nowrap">
                      <input
                        type="checkbox"
                        checked={isSelected}
                        onChange={() => handleSelectVuln(vulnerability.id)}
                        className="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
                      />
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <SeverityBadge severity={vulnerability.severity} size="sm" />
                    </td>
                    <td className="px-4 py-4">
                      <div className="max-w-xs">
                        <div className="font-medium text-gray-900 text-sm font-mono mb-2">
                          {vulnerability.cveId || vulnerability.title}
                        </div>
                        
                        {(() => {
                          // Use structured dependency data instead of parsing descriptions
                          const primaryDep = vulnerability.affectedDependencies?.[0];
                          if (!primaryDep) {
                            return (
                              <div className="space-y-1">
                                <div className="text-xs text-gray-700 font-medium">
                                  Security Vulnerability
                                </div>
                                <div className="text-xs text-gray-500">
                                  Check VM ticket for details
                                </div>
                              </div>
                            );
                          }

                          const component = primaryDep.name;
                          const currentVersion = primaryDep.version;
                          const targetVersion = primaryDep.targetVersion;
                          
                          // Display full component name without truncation
                          const displayComponent = component;
                          
                          if (targetVersion && targetVersion !== 'latest') {
                            return (
                              <div className="space-y-2">
                                <div className="text-xs text-gray-700 font-medium leading-relaxed break-words">
                                  {displayComponent}
                                </div>
                                <div className="flex items-center space-x-2">
                                  <span className="inline-flex items-center px-2 py-1 rounded text-xs bg-red-100 text-red-800 font-mono">
                                    v{currentVersion}
                                  </span>
                                  <span className="text-gray-400 text-sm">→</span>
                                  <span className="inline-flex items-center px-2 py-1 rounded text-xs bg-green-100 text-green-800 font-mono">
                                    v{targetVersion}
                                  </span>
                                </div>
                              </div>
                            );
                          }
                          return (
                            <div className="space-y-2">
                              <div className="text-xs text-gray-700 font-medium break-words">
                                {displayComponent}
                              </div>
                              <div className="flex items-center space-x-2">
                                <span className="inline-flex items-center px-2 py-1 rounded text-xs bg-gray-100 text-gray-800 font-mono">
                                  v{currentVersion}
                                </span>
                                <span className="text-gray-400 text-sm">→</span>
                                <span className="inline-flex items-center px-2 py-1 rounded text-xs bg-blue-100 text-blue-800 font-mono">
                                  Update
                                </span>
                              </div>
                            </div>
                          );
                        })()}
                        
                        {vulnerability.jiraTicket && (
                          <a
                            href={`https://appdirect.jira.com/browse/${vulnerability.jiraTicket.key}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-xs text-blue-600 hover:text-blue-700 inline-flex items-center mt-2"
                          >
                            <LinkIcon className="h-3 w-3 mr-1" />
                            {vulnerability.jiraTicket.key}
                          </a>
                        )}
                      </div>
                    </td>
                    <td className="px-4 py-4">
                      <div className="max-w-lg space-y-1">
                        {(() => {
                          // Remove duplicates by name and package manager
                          const uniqueDeps = vulnerability.affectedDependencies.filter((dep, index, arr) => 
                            arr.findIndex(d => d.name === dep.name && d.packageManager === dep.packageManager) === index
                          );
                          
                          // Show only the first dependency to avoid clutter
                          const displayDeps = uniqueDeps.slice(0, 1);
                          
                          return displayDeps.map((dep, i) => (
                            <div key={`${dep.name}-${dep.packageManager}`} className="text-sm">
                              <div className="flex items-center space-x-2">
                                <PackageManagerBadge manager={dep.packageManager} />
                                <div className="flex-1 min-w-0">
                                  <div className="font-medium text-gray-900 text-sm leading-tight break-words" 
                                       title={dep.name}>
                                    {dep.name}
                                  </div>
                                  <div className="text-xs text-gray-500 font-mono mt-0.5">
                                    v{dep.version}
                                  </div>
                                </div>
                              </div>
                            </div>
                          ));
                        })()}
                        
                        {(() => {
                          const uniqueDeps = vulnerability.affectedDependencies.filter((dep, index, arr) => 
                            arr.findIndex(d => d.name === dep.name && d.packageManager === dep.packageManager) === index
                          );
                          
                          if (uniqueDeps.length > 1) {
                            return (
                              <div className="text-xs text-gray-500 italic">
                                +{uniqueDeps.length - 1} more {uniqueDeps.length === 2 ? 'dependency' : 'dependencies'}
                              </div>
                            );
                          }
                          return null;
                        })()}
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-center">
                      {fixSuggestion ? (
                        <div className="flex items-center justify-center">
                          <CheckIcon className="h-4 w-4 text-green-600" />
                        </div>
                      ) : (
                        <div className="flex items-center justify-center">
                          <XMarkIcon className="h-4 w-4 text-gray-400" />
                        </div>
                      )}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-center text-sm font-medium">
                      {fixSuggestion && (
                        <button
                          onClick={() => {
                            // Get the primary affected dependency with resolved version
                            const primaryDep = vulnerability.affectedDependencies?.[0];
                            if (!primaryDep) return;
                            
                            // Use the actual resolved version from dependency tree
                            const currentResolvedVersion = primaryDep.version;
                            const dependencyName = primaryDep.name;
                            
                            // Use the already-extracted target version from backend (not the description)
                            let recommendedVersion = primaryDep.targetVersion || fixSuggestion.suggestedVersion;
                            
                            // Only fallback to description parsing if target version is 'latest' or not found
                            if (!recommendedVersion || recommendedVersion === 'latest') {
                              const desc = vulnerability.description || '';
                              const versionMatch = desc.match(/Recommended Version:\s*([^\n\r*]+)/i);
                              if (versionMatch) {
                                recommendedVersion = versionMatch[1].replace(/\*/g, '').trim();
                              }
                            }
                            
                            // Create enhanced fix suggestion with actual resolved versions
                            const enhancedFix = {
                              ...fixSuggestion,
                              dependencyName: dependencyName,
                              currentVersion: currentResolvedVersion, // Use actual resolved version
                              suggestedVersion: recommendedVersion,
                              recommendedVersion: recommendedVersion,
                              affectedVersion: currentResolvedVersion, // Use resolved version here too
                              latestVersion: 'latest',
                            };
                            setSelectedFix(enhancedFix);
                          }}
                          className="text-blue-600 hover:text-blue-900 text-xs px-2 py-1 rounded hover:bg-blue-50"
                        >
                          View
                        </button>
                      )}
                    </td>
                  </motion.tr>
                );
              })}
            </tbody>
          </table>
        </div>
      ) : (
        /* Detailed Card View */
        <div className="space-y-2">
          {filteredVulnerabilities.map((vulnerability, index) => {
            const fixSuggestion = getFixSuggestion(vulnerability);
            const isSelected = selectedVulns.has(vulnerability.id);
            const primaryDep = vulnerability.affectedDependencies?.[0];
            
            return (
              <motion.div
                key={vulnerability.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3, delay: index * 0.05 }}
                className={`bg-white rounded-lg border-2 p-4 shadow-sm hover:shadow-md transition-shadow ${
                  isSelected ? 'border-blue-300 bg-blue-50' : 'border-gray-200'
                }`}
              >
                <div className="flex items-start justify-between mb-2">
                  <div className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={isSelected}
                      onChange={() => handleSelectVuln(vulnerability.id)}
                      className="rounded border-gray-300 text-primary-600 focus:ring-primary-500 mt-1"
                    />
                    <SeverityBadge severity={vulnerability.severity} size="md" />
                  </div>
                  {fixSuggestion && (
                    <button
                      onClick={() => {
                        // Get the primary affected dependency with resolved version
                        const primaryDep = vulnerability.affectedDependencies?.[0];
                        if (!primaryDep) return;
                        
                        // Use the actual resolved version from dependency tree
                        const currentResolvedVersion = primaryDep.version;
                        const dependencyName = primaryDep.name;
                        
                        // Use the already-extracted target version from backend (not the description)
                        let recommendedVersion = primaryDep.targetVersion || fixSuggestion.suggestedVersion;
                        
                        // Only fallback to description parsing if target version is 'latest' or not found
                        if (!recommendedVersion || recommendedVersion === 'latest') {
                          const desc = vulnerability.description || '';
                          const versionMatch = desc.match(/Recommended Version:\s*([^\n\r*]+)/i);
                          if (versionMatch) {
                            recommendedVersion = versionMatch[1].replace(/\*/g, '').trim();
                          }
                        }
                        
                        // Create enhanced fix suggestion with actual resolved versions
                        const enhancedFix = {
                          ...fixSuggestion,
                          dependencyName: dependencyName,
                          currentVersion: currentResolvedVersion, // Use actual resolved version
                          suggestedVersion: recommendedVersion,
                          recommendedVersion: recommendedVersion,
                          affectedVersion: currentResolvedVersion, // Use resolved version here too
                          latestVersion: 'latest',
                        };
                        setSelectedFix(enhancedFix);
                      }}
                      className="text-blue-600 hover:text-blue-900 text-sm px-3 py-1 rounded border border-blue-300 hover:bg-blue-50 transition-colors"
                    >
                      View Fix
                    </button>
                  )}
                </div>

                <div className="space-y-1">
                  <div className="flex items-start space-x-3">
                    <span className="text-sm font-semibold text-gray-600 min-w-0 w-32">Vulnerabilities -</span>
                    <span className="text-sm font-mono text-gray-900 font-medium">
                      {vulnerability.cveId || vulnerability.title}
                    </span>
                  </div>

                  {primaryDep && (
                    <>
                      <div className="flex items-start space-x-3">
                        <span className="text-sm font-semibold text-gray-600 min-w-0 w-32">Component-</span>
                        <span className="text-sm font-mono text-gray-900 break-all">
                          {primaryDep.name}
                        </span>
                      </div>

                      <div className="flex items-start space-x-3">
                        <span className="text-sm font-semibold text-gray-600 min-w-0 w-32">Current Version -</span>
                        <span className="text-sm font-mono text-gray-900">
                          v{primaryDep.version}
                        </span>
                      </div>

                      <div className="flex items-start space-x-3">
                        <span className="text-sm font-semibold text-gray-600 min-w-0 w-32">Recommended Version -</span>
                        <span className="text-sm font-mono text-gray-900">
                          {primaryDep.targetVersion && primaryDep.targetVersion !== 'latest' 
                            ? primaryDep.targetVersion 
                            : 'Check JIRA ticket for details'}
                        </span>
                      </div>
                    </>
                  )}

                  {vulnerability.jiraTicket && (
                    <div className="flex items-start space-x-3">
                      <span className="text-sm font-semibold text-gray-600 min-w-0 w-32">Ticket -</span>
                      <a
                        href={`https://appdirect.jira.com/browse/${vulnerability.jiraTicket.key}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-sm font-mono text-blue-600 hover:text-blue-700 inline-flex items-center"
                      >
                        {vulnerability.jiraTicket.key}
                        <LinkIcon className="h-3 w-3 ml-1" />
                      </a>
                    </div>
                  )}

                  {primaryDep && (
                    <div className="flex items-start space-x-3">
                      <span className="text-sm font-semibold text-gray-600 min-w-0 w-32">Package Manager -</span>
                      <PackageManagerBadge manager={primaryDep.packageManager} />
                    </div>
                  )}
                </div>
              </motion.div>
            );
          })}
        </div>
      )}

      {filteredVulnerabilities.length === 0 && (
        <div className="text-center py-12">
          <ShieldCheckIcon className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            No vulnerabilities found
          </h3>
          <p className="text-gray-600">
            {filterSeverity === 'all' 
              ? 'Great! No security vulnerabilities detected.'
              : `No ${filterSeverity} severity vulnerabilities found.`
            }
          </p>
        </div>
      )}

      {/* Fix Suggestion Modal */}
      {selectedFix && (
        <FixSuggestionModal
          fixSuggestion={selectedFix}
          onClose={() => setSelectedFix(null)}
        />
      )}
    </div>
  );
}; 