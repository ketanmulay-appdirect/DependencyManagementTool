import { GradleVulnerabilityFixer } from './GradleVulnerabilityFixer';
import { MavenVulnerabilityFixer } from './MavenVulnerabilityFixer';
import { NpmVulnerabilityFixer } from './NpmVulnerabilityFixer';
import { logger } from '../../utils/logger';

export interface VulnerabilityFix {
  dependencyName: string;
  currentVersion: string;
  recommendedVersion: string;
  cveId: string;
  severity: string;
  description: string;
}

export interface FixResult {
  filesModified: number;
  errors: string[];
  modifiedFiles: string[];
  gradleFilesModified: number;
  mavenFilesModified: number;
  npmFilesModified: number;
}

export class VulnerabilityFixerOrchestrator {
  private gradleFixer: GradleVulnerabilityFixer;
  private mavenFixer: MavenVulnerabilityFixer;
  private npmFixer: NpmVulnerabilityFixer;

  constructor() {
    this.gradleFixer = new GradleVulnerabilityFixer();
    this.mavenFixer = new MavenVulnerabilityFixer();
    this.npmFixer = new NpmVulnerabilityFixer();
  }

  /**
   * Apply vulnerability fixes to all supported build systems
   * Uses modular fixers that reuse existing FileParserService code
   */
  async applyVulnerabilityFixes(
    parsingResults: any[],
    suggestions: any[],
    dependencies: any[]
  ): Promise<FixResult> {
    logger.info('üéØ VULNERABILITY FIXER ORCHESTRATOR - Starting multi-build system fixes');
    
    const result: FixResult = {
      filesModified: 0,
      errors: [],
      modifiedFiles: [],
      gradleFilesModified: 0,
      mavenFilesModified: 0,
      npmFilesModified: 0
    };

    try {
      // Separate suggestions by build system using modular fixers
      const gradleSuggestions = this.gradleFixer.filterGradleSuggestions(suggestions);
      const mavenSuggestions = this.mavenFixer.filterMavenSuggestions(suggestions);
      const npmSuggestions = this.npmFixer.filterNpmSuggestions(suggestions);

      logger.info(`üì¶ Build system breakdown: ${gradleSuggestions.length} Gradle, ${mavenSuggestions.length} Maven, ${npmSuggestions.length} NPM`);

      // Process Gradle fixes using modular fixer
      if (gradleSuggestions.length > 0) {
        logger.info('üîß Processing Gradle vulnerability fixes');
        const gradleVulnerabilityFixes = this.gradleFixer.convertToGradleVulnerabilityFixes(gradleSuggestions);
        const gradleResult = await this.gradleFixer.applyGradleVulnerabilityFixes(
          parsingResults,
          gradleVulnerabilityFixes,
          dependencies
        );
        
        result.gradleFilesModified = gradleResult.gradleFilesModified;
        result.errors.push(...gradleResult.errors);
        result.modifiedFiles.push(...gradleResult.modifiedFiles);
      }

      // Process Maven fixes using modular fixer
      if (mavenSuggestions.length > 0) {
        logger.info('üîß Processing Maven vulnerability fixes');
        const mavenVulnerabilityFixes = this.mavenFixer.convertToMavenVulnerabilityFixes(mavenSuggestions);
        const mavenResult = await this.mavenFixer.applyMavenVulnerabilityFixes(
          parsingResults,
          mavenVulnerabilityFixes,
          dependencies
        );
        
        result.mavenFilesModified = mavenResult.mavenFilesModified;
        result.errors.push(...mavenResult.errors);
        result.modifiedFiles.push(...mavenResult.modifiedFiles);
      }

      // Process NPM fixes using modular fixer
      if (npmSuggestions.length > 0) {
        logger.info('üîß Processing NPM vulnerability fixes');
        const npmVulnerabilityFixes = this.npmFixer.convertToNpmVulnerabilityFixes(npmSuggestions);
        const npmResult = await this.npmFixer.applyNpmVulnerabilityFixes(
          parsingResults,
          npmVulnerabilityFixes,
          dependencies
        );
        
        result.npmFilesModified = npmResult.npmFilesModified;
        result.errors.push(...npmResult.errors);
        result.modifiedFiles.push(...npmResult.modifiedFiles);
      }

      // Calculate total files modified
      result.filesModified = result.gradleFilesModified + result.mavenFilesModified + result.npmFilesModified;

      logger.info('üéØ VULNERABILITY FIXER ORCHESTRATOR - Completed multi-build system fixes');
      logger.info(`üìä Final Results: ${result.filesModified} total files modified`);
      logger.info(`   Gradle: ${result.gradleFilesModified} files`);
      logger.info(`   Maven: ${result.mavenFilesModified} files`);
      logger.info(`   NPM: ${result.npmFilesModified} files`);

      if (result.errors.length > 0) {
        logger.warn(`‚ö†Ô∏è Total errors encountered: ${result.errors.length}`);
      }

    } catch (error) {
      const errorMessage = `Orchestrator failed to apply vulnerability fixes: ${error}`;
      logger.error('‚ùå Vulnerability fixer orchestrator error:', error);
      result.errors.push(errorMessage);
    }

    return result;
  }

  /**
   * Get build system statistics
   */
  getBuildSystemStats(suggestions: any[]): {
    gradleCount: number;
    mavenCount: number;
    npmCount: number;
    totalCount: number;
  } {
    const gradleSuggestions = this.gradleFixer.filterGradleSuggestions(suggestions);
    const mavenSuggestions = this.mavenFixer.filterMavenSuggestions(suggestions);
    const npmSuggestions = this.npmFixer.filterNpmSuggestions(suggestions);

    return {
      gradleCount: gradleSuggestions.length,
      mavenCount: mavenSuggestions.length,
      npmCount: npmSuggestions.length,
      totalCount: suggestions.length
    };
  }

  /**
   * Validate all modified files by type
   */
  async validateAllFiles(parsingResults: any[]): Promise<{
    gradleValid: boolean;
    mavenValid: boolean;
    npmValid: boolean;
    allValid: boolean;
    errors: string[];
  }> {
    const gradleValidation = await this.gradleFixer.validateGradleFiles(parsingResults);
    const mavenValidation = await this.mavenFixer.validateMavenFiles(parsingResults);
    const npmValidation = await this.npmFixer.validateNpmFiles(parsingResults);

    const allErrors = [
      ...gradleValidation.errors,
      ...mavenValidation.errors,
      ...npmValidation.errors
    ];

    return {
      gradleValid: gradleValidation.valid,
      mavenValid: mavenValidation.valid,
      npmValid: npmValidation.valid,
      allValid: gradleValidation.valid && mavenValidation.valid && npmValidation.valid,
      errors: allErrors
    };
  }

  /**
   * Generate build commands for all build systems
   */
  generateAllBuildCommands(parsingResults: any[]): {
    gradleCommands: string[];
    mavenCommands: string[];
    npmCommands: string[];
    allCommands: string[];
  } {
    const gradleCommands = this.gradleFixer.generateGradleBuildCommands(parsingResults);
    const mavenCommands = this.mavenFixer.generateMavenBuildCommands(parsingResults);
    const npmCommands = this.npmFixer.generateNpmBuildCommands(parsingResults);

    return {
      gradleCommands,
      mavenCommands,
      npmCommands,
      allCommands: [...gradleCommands, ...mavenCommands, ...npmCommands]
    };
  }
} 